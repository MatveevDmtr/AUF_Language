

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
--------------------Start program--------------------
File size = 908
buffer size: 908
fread number of symbols: 889
tcode created
line in readVal: main ()
	Лучше иметь друга, чем друг друга: Коэф_А 0
	Лучше иметь друга, чем друг друга: Коэф_Б 0
	Лучше иметь друга, чем друг друга: Коэф_В 0
	Дед - это как волк, только не волк: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 40
line in readVal: Коэф_А 0
	Лучше иметь друга, чем друг друга: Коэф_Б 0
	Лучше иметь друга, чем друг друга: Коэф_В 0
	Дед - это как волк, только не волк: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 48
line in readVal: 0
	Лучше иметь друга, чем друг друга: Коэф_Б 0
	Лучше иметь друга, чем друг друга: Коэф_В 0
	Дед - это как волк, только не волк: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1


++++++++++Tcode Dump++++++++++

Size     = 9
Capacity = 10

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  FREE

----------Tcode Dump----------

finish Tcode Recalloc


++++++++++Tcode Dump++++++++++

Size     = 9
Capacity = 20

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  FREE
[0010]:  FREE
[0011]:  FREE
[0012]:  FREE
[0013]:  FREE
[0014]:  FREE
[0015]:  FREE
[0016]:  FREE
[0017]:  FREE
[0018]:  FREE
[0019]:  FREE

----------Tcode Dump----------

line in readVal: Коэф_Б 0
	Лучше иметь друга, чем друг друга: Коэф_В 0
	Дед - это как волк, только не волк: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 48
line in readVal: 0
	Лучше иметь друга, чем друг друга: Коэф_В 0
	Дед - это как волк, только не волк: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: Коэф_В 0
	Дед - это как волк, только не волк: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 48
line in readVal: 0
	Дед - это как волк, только не волк: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: Коэф_А, Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 44


++++++++++Tcode Dump++++++++++

Size     = 19
Capacity = 20

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  OPR    VAR
[0010]:  STR    Коэф_Б
[0011]:  VAL    0
[0012]:  NLN    1
[0013]:  OPR    VAR
[0014]:  STR    Коэф_В
[0015]:  VAL    0
[0016]:  NLN    1
[0017]:  OPR    INP
[0018]:  STR    Коэф_А
[0019]:  FREE

----------Tcode Dump----------

finish Tcode Recalloc


++++++++++Tcode Dump++++++++++

Size     = 19
Capacity = 40

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  OPR    VAR
[0010]:  STR    Коэф_Б
[0011]:  VAL    0
[0012]:  NLN    1
[0013]:  OPR    VAR
[0014]:  STR    Коэф_В
[0015]:  VAL    0
[0016]:  NLN    1
[0017]:  OPR    INP
[0018]:  STR    Коэф_А
[0019]:  FREE
[0020]:  FREE
[0021]:  FREE
[0022]:  FREE
[0023]:  FREE
[0024]:  FREE
[0025]:  FREE
[0026]:  FREE
[0027]:  FREE
[0028]:  FREE
[0029]:  FREE
[0030]:  FREE
[0031]:  FREE
[0032]:  FREE
[0033]:  FREE
[0034]:  FREE
[0035]:  FREE
[0036]:  FREE
[0037]:  FREE
[0038]:  FREE
[0039]:  FREE

----------Tcode Dump----------

line in readVal: Коэф_Б, Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 44
line in readVal: Коэф_В
	Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: -54
line in readVal: Квадратка (Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 40
line in readVal: Коэф_А, Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 44
line in readVal: Коэф_Б, Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 44
line in readVal: Коэф_В)
Обид не держу - держу пиво. Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: Квадратка (А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 40
line in readVal: А, Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 44
line in readVal: Б, В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 44


++++++++++Tcode Dump++++++++++

Size     = 39
Capacity = 40

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  OPR    VAR
[0010]:  STR    Коэф_Б
[0011]:  VAL    0
[0012]:  NLN    1
[0013]:  OPR    VAR
[0014]:  STR    Коэф_В
[0015]:  VAL    0
[0016]:  NLN    1
[0017]:  OPR    INP
[0018]:  STR    Коэф_А
[0019]:  OPR    COM
[0020]:  STR    Коэф_Б
[0021]:  OPR    COM
[0022]:  STR    Коэф_В
[0023]:  NLN    1
[0024]:  STR    Квадратка
[0025]:  OPR    OPEN
[0026]:  STR    Коэф_А
[0027]:  OPR    COM
[0028]:  STR    Коэф_Б
[0029]:  OPR    COM
[0030]:  STR    Коэф_В
[0031]:  OPR    CLOS
[0032]:  NLN    0
[0033]:  OPR    VOID
[0034]:  STR    Квадратка
[0035]:  OPR    OPEN
[0036]:  STR    А
[0037]:  OPR    COM
[0038]:  STR    Б
[0039]:  FREE

----------Tcode Dump----------

finish Tcode Recalloc


++++++++++Tcode Dump++++++++++

Size     = 39
Capacity = 80

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  OPR    VAR
[0010]:  STR    Коэф_Б
[0011]:  VAL    0
[0012]:  NLN    1
[0013]:  OPR    VAR
[0014]:  STR    Коэф_В
[0015]:  VAL    0
[0016]:  NLN    1
[0017]:  OPR    INP
[0018]:  STR    Коэф_А
[0019]:  OPR    COM
[0020]:  STR    Коэф_Б
[0021]:  OPR    COM
[0022]:  STR    Коэф_В
[0023]:  NLN    1
[0024]:  STR    Квадратка
[0025]:  OPR    OPEN
[0026]:  STR    Коэф_А
[0027]:  OPR    COM
[0028]:  STR    Коэф_Б
[0029]:  OPR    COM
[0030]:  STR    Коэф_В
[0031]:  OPR    CLOS
[0032]:  NLN    0
[0033]:  OPR    VOID
[0034]:  STR    Квадратка
[0035]:  OPR    OPEN
[0036]:  STR    А
[0037]:  OPR    COM
[0038]:  STR    Б
[0039]:  FREE
[0040]:  FREE
[0041]:  FREE
[0042]:  FREE
[0043]:  FREE
[0044]:  FREE
[0045]:  FREE
[0046]:  FREE
[0047]:  FREE
[0048]:  FREE
[0049]:  FREE
[0050]:  FREE
[0051]:  FREE
[0052]:  FREE
[0053]:  FREE
[0054]:  FREE
[0055]:  FREE
[0056]:  FREE
[0057]:  FREE
[0058]:  FREE
[0059]:  FREE
[0060]:  FREE
[0061]:  FREE
[0062]:  FREE
[0063]:  FREE
[0064]:  FREE
[0065]:  FREE
[0066]:  FREE
[0067]:  FREE
[0068]:  FREE
[0069]:  FREE
[0070]:  FREE
[0071]:  FREE
[0072]:  FREE
[0073]:  FREE
[0074]:  FREE
[0075]:  FREE
[0076]:  FREE
[0077]:  FREE
[0078]:  FREE
[0079]:  FREE

----------Tcode Dump----------

line in readVal: В)
	Я может и не может: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: А равный 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: -16
line in readVal: 0
		Я может и не может: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: Б равный 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: -16
line in readVal: 0
			Я может и не может: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: В равный 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: -16
line in readVal: 0
				Когда волк молчит, лучше его не перебивать: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: 888
			Но хотя бы не я:
				Когда волк молчит, лучше его не перебивать: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 3
line in readVal: 228
		Но хотя бы не я:
			Когда волк молчит, лучше его не перебивать: (0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 3
line in readVal: 0-В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: В)/Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: Б
	Но хотя бы не я:
		Лучше иметь друга, чем друг друга: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: -51


++++++++++Tcode Dump++++++++++

Size     = 79
Capacity = 80

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  OPR    VAR
[0010]:  STR    Коэф_Б
[0011]:  VAL    0
[0012]:  NLN    1
[0013]:  OPR    VAR
[0014]:  STR    Коэф_В
[0015]:  VAL    0
[0016]:  NLN    1
[0017]:  OPR    INP
[0018]:  STR    Коэф_А
[0019]:  OPR    COM
[0020]:  STR    Коэф_Б
[0021]:  OPR    COM
[0022]:  STR    Коэф_В
[0023]:  NLN    1
[0024]:  STR    Квадратка
[0025]:  OPR    OPEN
[0026]:  STR    Коэф_А
[0027]:  OPR    COM
[0028]:  STR    Коэф_Б
[0029]:  OPR    COM
[0030]:  STR    Коэф_В
[0031]:  OPR    CLOS
[0032]:  NLN    0
[0033]:  OPR    VOID
[0034]:  STR    Квадратка
[0035]:  OPR    OPEN
[0036]:  STR    А
[0037]:  OPR    COM
[0038]:  STR    Б
[0039]:  OPR    COM
[0040]:  STR    В
[0041]:  OPR    CLOS
[0042]:  NLN    1
[0043]:  OPR    IF
[0044]:  STR    А
[0045]:  OPR    EQ
[0046]:  VAL    0
[0047]:  NLN    2
[0048]:  OPR    IF
[0049]:  STR    Б
[0050]:  OPR    EQ
[0051]:  VAL    0
[0052]:  NLN    3
[0053]:  OPR    IF
[0054]:  STR    В
[0055]:  OPR    EQ
[0056]:  VAL    0
[0057]:  NLN    4
[0058]:  OPR    OUT
[0059]:  VAL    888
[0060]:  NLN    3
[0061]:  OPR    ELSE
[0062]:  NLN    4
[0063]:  OPR    OUT
[0064]:  VAL    228
[0065]:  NLN    2
[0066]:  OPR    ELSE
[0067]:  NLN    3
[0068]:  OPR    OUT
[0069]:  OPR    OPEN
[0070]:  VAL    0
[0071]:  OPR    SUB
[0072]:  STR    В
[0073]:  OPR    CLOS
[0074]:  OPR    DIV
[0075]:  STR    Б
[0076]:  NLN    1
[0077]:  OPR    ELSE
[0078]:  NLN    2
[0079]:  FREE

----------Tcode Dump----------

finish Tcode Recalloc


++++++++++Tcode Dump++++++++++

Size     = 79
Capacity = 160

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  OPR    VAR
[0010]:  STR    Коэф_Б
[0011]:  VAL    0
[0012]:  NLN    1
[0013]:  OPR    VAR
[0014]:  STR    Коэф_В
[0015]:  VAL    0
[0016]:  NLN    1
[0017]:  OPR    INP
[0018]:  STR    Коэф_А
[0019]:  OPR    COM
[0020]:  STR    Коэф_Б
[0021]:  OPR    COM
[0022]:  STR    Коэф_В
[0023]:  NLN    1
[0024]:  STR    Квадратка
[0025]:  OPR    OPEN
[0026]:  STR    Коэф_А
[0027]:  OPR    COM
[0028]:  STR    Коэф_Б
[0029]:  OPR    COM
[0030]:  STR    Коэф_В
[0031]:  OPR    CLOS
[0032]:  NLN    0
[0033]:  OPR    VOID
[0034]:  STR    Квадратка
[0035]:  OPR    OPEN
[0036]:  STR    А
[0037]:  OPR    COM
[0038]:  STR    Б
[0039]:  OPR    COM
[0040]:  STR    В
[0041]:  OPR    CLOS
[0042]:  NLN    1
[0043]:  OPR    IF
[0044]:  STR    А
[0045]:  OPR    EQ
[0046]:  VAL    0
[0047]:  NLN    2
[0048]:  OPR    IF
[0049]:  STR    Б
[0050]:  OPR    EQ
[0051]:  VAL    0
[0052]:  NLN    3
[0053]:  OPR    IF
[0054]:  STR    В
[0055]:  OPR    EQ
[0056]:  VAL    0
[0057]:  NLN    4
[0058]:  OPR    OUT
[0059]:  VAL    888
[0060]:  NLN    3
[0061]:  OPR    ELSE
[0062]:  NLN    4
[0063]:  OPR    OUT
[0064]:  VAL    228
[0065]:  NLN    2
[0066]:  OPR    ELSE
[0067]:  NLN    3
[0068]:  OPR    OUT
[0069]:  OPR    OPEN
[0070]:  VAL    0
[0071]:  OPR    SUB
[0072]:  STR    В
[0073]:  OPR    CLOS
[0074]:  OPR    DIV
[0075]:  STR    Б
[0076]:  NLN    1
[0077]:  OPR    ELSE
[0078]:  NLN    2
[0079]:  FREE
[0080]:  FREE
[0081]:  FREE
[0082]:  FREE
[0083]:  FREE
[0084]:  FREE
[0085]:  FREE
[0086]:  FREE
[0087]:  FREE
[0088]:  FREE
[0089]:  FREE
[0090]:  FREE
[0091]:  FREE
[0092]:  FREE
[0093]:  FREE
[0094]:  FREE
[0095]:  FREE
[0096]:  FREE
[0097]:  FREE
[0098]:  FREE
[0099]:  FREE
[0100]:  FREE
[0101]:  FREE
[0102]:  FREE
[0103]:  FREE
[0104]:  FREE
[0105]:  FREE
[0106]:  FREE
[0107]:  FREE
[0108]:  FREE
[0109]:  FREE
[0110]:  FREE
[0111]:  FREE
[0112]:  FREE
[0113]:  FREE
[0114]:  FREE
[0115]:  FREE
[0116]:  FREE
[0117]:  FREE
[0118]:  FREE
[0119]:  FREE
[0120]:  FREE
[0121]:  FREE
[0122]:  FREE
[0123]:  FREE
[0124]:  FREE
[0125]:  FREE
[0126]:  FREE
[0127]:  FREE
[0128]:  FREE
[0129]:  FREE
[0130]:  FREE
[0131]:  FREE
[0132]:  FREE
[0133]:  FREE
[0134]:  FREE
[0135]:  FREE
[0136]:  FREE
[0137]:  FREE
[0138]:  FREE
[0139]:  FREE
[0140]:  FREE
[0141]:  FREE
[0142]:  FREE
[0143]:  FREE
[0144]:  FREE
[0145]:  FREE
[0146]:  FREE
[0147]:  FREE
[0148]:  FREE
[0149]:  FREE
[0150]:  FREE
[0151]:  FREE
[0152]:  FREE
[0153]:  FREE
[0154]:  FREE
[0155]:  FREE
[0156]:  FREE
[0157]:  FREE
[0158]:  FREE
[0159]:  FREE

----------Tcode Dump----------

line in readVal: Дискриминант 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 48
line in readVal: 0
		Запомните твари: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: Дискриминант Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: -63
line in readVal: Б * Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 42
line in readVal: Б - 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 45
line in readVal: 4 * А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: А * В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 42
line in readVal: В
		Когда волк молчит, лучше его не перебивать: ((0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: -54
line in readVal: 0-Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: Б)+Кореш Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: Дискриминант)/(2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: 2*А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: А)
		Когда волк молчит, лучше его не перебивать: ((0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: 0-Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 1
line in readVal: Б)-Кореш Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: Дискриминант)/(2*А) end.
num read sym: 0
next sym: 41
line in readVal: 2*А) end.
num read sym: 1
line in readVal: А) end.
num read sym: 0
next sym: 41


++++++++++Tcode Dump++++++++++

Size     = 130
Capacity = 160

[0000]:  OPR    VOID
[0001]:  STR    main
[0002]:  OPR    OPEN
[0003]:  OPR    CLOS
[0004]:  NLN    1
[0005]:  OPR    VAR
[0006]:  STR    Коэф_А
[0007]:  VAL    0
[0008]:  NLN    1
[0009]:  OPR    VAR
[0010]:  STR    Коэф_Б
[0011]:  VAL    0
[0012]:  NLN    1
[0013]:  OPR    VAR
[0014]:  STR    Коэф_В
[0015]:  VAL    0
[0016]:  NLN    1
[0017]:  OPR    INP
[0018]:  STR    Коэф_А
[0019]:  OPR    COM
[0020]:  STR    Коэф_Б
[0021]:  OPR    COM
[0022]:  STR    Коэф_В
[0023]:  NLN    1
[0024]:  STR    Квадратка
[0025]:  OPR    OPEN
[0026]:  STR    Коэф_А
[0027]:  OPR    COM
[0028]:  STR    Коэф_Б
[0029]:  OPR    COM
[0030]:  STR    Коэф_В
[0031]:  OPR    CLOS
[0032]:  NLN    0
[0033]:  OPR    VOID
[0034]:  STR    Квадратка
[0035]:  OPR    OPEN
[0036]:  STR    А
[0037]:  OPR    COM
[0038]:  STR    Б
[0039]:  OPR    COM
[0040]:  STR    В
[0041]:  OPR    CLOS
[0042]:  NLN    1
[0043]:  OPR    IF
[0044]:  STR    А
[0045]:  OPR    EQ
[0046]:  VAL    0
[0047]:  NLN    2
[0048]:  OPR    IF
[0049]:  STR    Б
[0050]:  OPR    EQ
[0051]:  VAL    0
[0052]:  NLN    3
[0053]:  OPR    IF
[0054]:  STR    В
[0055]:  OPR    EQ
[0056]:  VAL    0
[0057]:  NLN    4
[0058]:  OPR    OUT
[0059]:  VAL    888
[0060]:  NLN    3
[0061]:  OPR    ELSE
[0062]:  NLN    4
[0063]:  OPR    OUT
[0064]:  VAL    228
[0065]:  NLN    2
[0066]:  OPR    ELSE
[0067]:  NLN    3
[0068]:  OPR    OUT
[0069]:  OPR    OPEN
[0070]:  VAL    0
[0071]:  OPR    SUB
[0072]:  STR    В
[0073]:  OPR    CLOS
[0074]:  OPR    DIV
[0075]:  STR    Б
[0076]:  NLN    1
[0077]:  OPR    ELSE
[0078]:  NLN    2
[0079]:  OPR    VAR
[0080]:  STR    Дискриминант
[0081]:  VAL    0
[0082]:  NLN    2
[0083]:  OPR    ASS
[0084]:  STR    Дискриминант
[0085]:  STR    Б
[0086]:  OPR    MUL
[0087]:  STR    Б
[0088]:  OPR    SUB
[0089]:  VAL    4
[0090]:  OPR    MUL
[0091]:  STR    А
[0092]:  OPR    MUL
[0093]:  STR    В
[0094]:  NLN    2
[0095]:  OPR    OUT
[0096]:  OPR    OPEN
[0097]:  OPR    OPEN
[0098]:  VAL    0
[0099]:  OPR    SUB
[0100]:  STR    Б
[0101]:  OPR    CLOS
[0102]:  OPR    ADD
[0103]:  OPR    SQRT
[0104]:  STR    Дискриминант
[0105]:  OPR    CLOS
[0106]:  OPR    DIV
[0107]:  OPR    OPEN
[0108]:  VAL    2
[0109]:  OPR    MUL
[0110]:  STR    А
[0111]:  OPR    CLOS
[0112]:  NLN    2
[0113]:  OPR    OUT
[0114]:  OPR    OPEN
[0115]:  OPR    OPEN
[0116]:  VAL    0
[0117]:  OPR    SUB
[0118]:  STR    Б
[0119]:  OPR    CLOS
[0120]:  OPR    SUB
[0121]:  OPR    SQRT
[0122]:  STR    Дискриминант
[0123]:  OPR    CLOS
[0124]:  OPR    DIV
[0125]:  OPR    OPEN
[0126]:  VAL    2
[0127]:  OPR    MUL
[0128]:  STR    А
[0129]:  OPR    CLOS
[0130]:  FREE
[0131]:  FREE
[0132]:  FREE
[0133]:  FREE
[0134]:  FREE
[0135]:  FREE
[0136]:  FREE
[0137]:  FREE
[0138]:  FREE
[0139]:  FREE
[0140]:  FREE
[0141]:  FREE
[0142]:  FREE
[0143]:  FREE
[0144]:  FREE
[0145]:  FREE
[0146]:  FREE
[0147]:  FREE
[0148]:  FREE
[0149]:  FREE
[0150]:  FREE
[0151]:  FREE
[0152]:  FREE
[0153]:  FREE
[0154]:  FREE
[0155]:  FREE
[0156]:  FREE
[0157]:  FREE
[0158]:  FREE
[0159]:  FREE

----------Tcode Dump----------

start making syntax tree
start CodeBlock
try to find open brace in ip: 2
start GetDefParams
start GetVariable: ip=3
first var in param: 0000000000000000
No def params found
try to find closing brace in ip: 3
start NewLine: ip: 4, tcode->Size: 130
new line found (curr_line): 2
NLN: 1, curr level: 0
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
start GetVariable: ip=6
got variable in GetNewVar()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
content of l_node: Коэф_А
finish GetNewVar()
finish GetTrunkBranch()
block root: 00000241e91f3d10
before cycle in CodeBlock
start NewLine: ip: 8, tcode->Size: 130
new line found (curr_line): 3
NLN: 1, curr level: 1
iteration in CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
start GetVariable: ip=10
got variable in GetNewVar()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
content of l_node: Коэф_Б
finish GetNewVar()
finish GetTrunkBranch()
found action: 00000241e91f3e50, type: STM
block tail: 00000241e91f3d10
end iteration
curr_level: 1
start NewLine: ip: 12, tcode->Size: 130
new line found (curr_line): 4
NLN: 1, curr level: 1
iteration in CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
start GetVariable: ip=14
got variable in GetNewVar()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
content of l_node: Коэф_В
finish GetNewVar()
finish GetTrunkBranch()
found action: 00000241e7908f50, type: STM
block tail: 00000241e91f3e50
end iteration
curr_level: 1
start NewLine: ip: 16, tcode->Size: 130
new line found (curr_line): 5
NLN: 1, curr level: 1
iteration in CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
start GetDefParams
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
first var in param: 00000241e7909130
before cycle in GetDefParam
iteration in CodeBlock
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
end iteration in GetDefParams
iteration in CodeBlock
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
end iteration in GetDefParams
ret from GetParams, ip: 23
got expression in GetRet()
finish GetAss()
finish GetTrunkBranch()
found action: 00000241e7909720, type: STM
block tail: 00000241e7908f50
end iteration
curr_level: 1
start NewLine: ip: 23, tcode->Size: 130
new line found (curr_line): 6
NLN: 1, curr level: 1
iteration in CodeBlock
returning GetCall in GetVoid
try to find open brace in ip: 25
start GetDefParams
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
first var in param: 00000241e79096d0
before cycle in GetDefParam
iteration in CodeBlock
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
end iteration in GetDefParams
iteration in CodeBlock
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
end iteration in GetDefParams
ret from GetParams, ip: 31
try to find closing brace in ip: 31
finish GetTrunkBranch()
found action: 00000241e7909680, type: STM
block tail: 00000241e7909720
end iteration
curr_level: 1
start NewLine: ip: 32, tcode->Size: 130
new line found (curr_line): 7
NLN: 0, curr level: 1
level-: 0
NLN: 0
block root: 00000241e91f3d10
finish GetTrunkBranch()
block root: 00000241e7909270
before cycle in CodeBlock
start NewLine: ip: 32, tcode->Size: 130
new line found (curr_line): 7
NLN: 0, curr level: 0
iteration in CodeBlock
try to find open brace in ip: 35
start GetDefParams
start GetVariable: ip=36
first var in param: 00000241e7909090
before cycle in GetDefParam
iteration in CodeBlock
start GetVariable: ip=38
end iteration in GetDefParams
iteration in CodeBlock
start GetVariable: ip=40
end iteration in GetDefParams
ret from GetParams, ip: 41
try to find closing brace in ip: 41
start NewLine: ip: 42, tcode->Size: 130
new line found (curr_line): 8
NLN: 1, curr level: 0
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
Returning GetRet instead of NEWVAR
start GetRet
Returning GetWhile instead of RET
returning GetAss in GetWhile
start GetBoolP
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start NewLine: ip: 47, tcode->Size: 130
new line found (curr_line): 9
NLN: 2, curr level: 1
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
Returning GetRet instead of NEWVAR
start GetRet
Returning GetWhile instead of RET
returning GetAss in GetWhile
start GetBoolP
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start NewLine: ip: 52, tcode->Size: 130
new line found (curr_line): 10
NLN: 3, curr level: 2
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
Returning GetRet instead of NEWVAR
start GetRet
Returning GetWhile instead of RET
returning GetAss in GetWhile
start GetBoolP
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start NewLine: ip: 57, tcode->Size: 130
new line found (curr_line): 11
NLN: 4, curr level: 3
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
start GetDefParams
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
first var in param: 00000241e790c170
before cycle in GetDefParam
ret from GetParams, ip: 60
got expression in GetOutput()
finish GetOutput()
finish GetTrunkBranch()
block root: 00000241e790c260
before cycle in CodeBlock
start NewLine: ip: 60, tcode->Size: 130
new line found (curr_line): 12
NLN: 3, curr level: 4
level-: 3
NLN: 3
block root: 00000241e790c260
start NewLine: ip: 60, tcode->Size: 130
new line found (curr_line): 12
NLN: 3, curr level: 3
start NewLine: ip: 62, tcode->Size: 130
new line found (curr_line): 13
NLN: 4, curr level: 3
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
start GetDefParams
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
first var in param: 00000241e790b950
before cycle in GetDefParam
ret from GetParams, ip: 65
got expression in GetOutput()
finish GetOutput()
finish GetTrunkBranch()
block root: 00000241e790c210
before cycle in CodeBlock
start NewLine: ip: 65, tcode->Size: 130
new line found (curr_line): 14
NLN: 2, curr level: 4
level-: 3
NLN: 2
block root: 00000241e790c210
content of l_node in GetIf: EQ
finish GetTrunkBranch()
block root: 00000241e790b7c0
before cycle in CodeBlock
start NewLine: ip: 65, tcode->Size: 130
new line found (curr_line): 14
NLN: 2, curr level: 3
level-: 2
NLN: 2
block root: 00000241e790b7c0
start NewLine: ip: 65, tcode->Size: 130
new line found (curr_line): 14
NLN: 2, curr level: 2
start NewLine: ip: 67, tcode->Size: 130
new line found (curr_line): 15
NLN: 3, curr level: 2
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
start GetDefParams
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
first var in param: 00000241e790b9a0
before cycle in GetDefParam
ret from GetParams, ip: 76
got expression in GetOutput()
finish GetOutput()
finish GetTrunkBranch()
block root: 00000241e790c3f0
before cycle in CodeBlock
start NewLine: ip: 76, tcode->Size: 130
new line found (curr_line): 16
NLN: 1, curr level: 3
level-: 2
NLN: 1
block root: 00000241e790c3f0
content of l_node in GetIf: EQ
finish GetTrunkBranch()
block root: 00000241e790bc70
before cycle in CodeBlock
start NewLine: ip: 76, tcode->Size: 130
new line found (curr_line): 16
NLN: 1, curr level: 2
level-: 1
NLN: 1
block root: 00000241e790bc70
start NewLine: ip: 76, tcode->Size: 130
new line found (curr_line): 16
NLN: 1, curr level: 1
start NewLine: ip: 78, tcode->Size: 130
new line found (curr_line): 17
NLN: 2, curr level: 1
start CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
start GetVariable: ip=80
got variable in GetNewVar()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
content of l_node: Дискриминант
finish GetNewVar()
finish GetTrunkBranch()
block root: 00000241e790b5e0
before cycle in CodeBlock
start NewLine: ip: 82, tcode->Size: 130
new line found (curr_line): 18
NLN: 2, curr level: 2
iteration in CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
Returning GetNewVar instead of OUTPUT
start GetNewVar
Returning GetRet instead of NEWVAR
start GetRet
Returning GetWhile instead of RET
returning GetAss in GetWhile
returning GetAss in GetIf
start GetAss
start GetVariable: ip=84
got variable in GetAss()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
content of l_node: Дискриминант
finish GetAss()
finish GetTrunkBranch()
found action: 00000241e790d310, type: STM
block tail: 00000241e790b5e0
end iteration
curr_level: 2
start NewLine: ip: 94, tcode->Size: 130
new line found (curr_line): 19
NLN: 2, curr level: 2
iteration in CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
start GetDefParams
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
first var in param: 00000241e790d220
before cycle in GetDefParam
ret from GetParams, ip: 112
got expression in GetOutput()
finish GetOutput()
finish GetTrunkBranch()
found action: 00000241e790cd70, type: STM
block tail: 00000241e790d310
end iteration
curr_level: 2
start NewLine: ip: 112, tcode->Size: 130
new line found (curr_line): 20
NLN: 2, curr level: 2
iteration in CodeBlock
returning GetCall in GetVoid
returning GetInput in GetCall
start GetInput
Returning GetOutput instead of INPUT
start GetOutput
start GetDefParams
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
start GetE()
start GetT()
start GetSqrt()
start GetDeg()
start GetP()
start GetSqrt()
start GetDeg()
start GetP()
first var in param: 00000241e790cdc0
before cycle in GetDefParam
ret from GetParams, ip: 130
got expression in GetOutput()
finish GetOutput()
finish GetTrunkBranch()
found action: 00000241e790d3b0, type: STM
block tail: 00000241e790cd70
end iteration
curr_level: 2
level-: 1
NLN: 1397705795
block root: 00000241e790b5e0
content of l_node in GetIf: EQ
finish GetTrunkBranch()
block root: 00000241e790c780
before cycle in CodeBlock
start NewLine: ip: 129, tcode->Size: 130
level-: 0
NLN: 192
block root: 00000241e790c780
finish GetTrunkBranch()
found action: 00000241e790ccd0, type: STM
block tail: 00000241e7909270
end iteration
curr_level: 0
start NewLine: ip: 128, tcode->Size: 130
level-: -1
NLN: 5002573
block root: 00000241e7909270
tree pointer in HTMLDump: 00007ff7cf2207a0
picture name: graphCode0.png
tree pointer: 00007ff7cf2207a0
start making console cmd
console cmd: dot -T png -o graphCode0.png dump.dot
tree made, start writing
Start writing tree
start writing node: OP
start writing node: OP
start writing node: FUNC
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: FUNC
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: FUNC
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAL
start writing node: VAR
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAL
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: VAR
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: VAL
start writing node: VAR
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAL
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAL
start writing node: VAR
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: OP
start writing node: VAL
start writing node: VAR
start writing node: OP
start writing node: VAR
start writing node: OP
start writing node: VAL
start writing node: VAR
Finish writing tree
Start scanning tree file


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: FUNC
has sons
read line 2: FUNC
new op is ready


start scanning node
read line 1: "main"
has sons
read line 2: "main"
num read sym before val = 0
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: VOID
has sons
read line 2: VOID
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: VAR
has sons
read line 2: VAR
new op is ready


start scanning node
read line 1: "Коэф_А"
read line 2: "Коэф_А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: VAR
has sons
read line 2: VAR
new op is ready


start scanning node
read line 1: "Коэф_Б"
read line 2: "Коэф_Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: VAR
has sons
read line 2: VAR
new op is ready


start scanning node
read line 1: "Коэф_В"
read line 2: "Коэф_В"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: INP
has sons
read line 2: INP
new op is ready


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "Коэф_А"
read line 2: "Коэф_А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "Коэф_Б"
read line 2: "Коэф_Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "Коэф_В"
read line 2: "Коэф_В"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: CALL
has sons
read line 2: CALL
new op is ready


start scanning node
read line 1: "Квадратка"
has sons
read line 2: "Квадратка"
num read sym before val = 0
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "Коэф_А"
read line 2: "Коэф_А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "Коэф_Б"
read line 2: "Коэф_Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "Коэф_В"
read line 2: "Коэф_В"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
has sons
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: FUNC
has sons
read line 2: FUNC
new op is ready


start scanning node
read line 1: "Квадратка"
has sons
read line 2: "Квадратка"
num read sym before val = 0
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "А"
read line 2: "А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "Б"
read line 2: "Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: "В"
read line 2: "В"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: VOID
has sons
read line 2: VOID
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: IF
has sons
read line 2: IF
new op is ready


start scanning node
read line 1: EQ
has sons
read line 2: EQ
new op is ready


start scanning node
read line 1: "А"
read line 2: "А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: ELSE
has sons
read line 2: ELSE
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: IF
has sons
read line 2: IF
new op is ready


start scanning node
read line 1: EQ
has sons
read line 2: EQ
new op is ready


start scanning node
read line 1: "Б"
read line 2: "Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: ELSE
has sons
read line 2: ELSE
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: IF
has sons
read line 2: IF
new op is ready


start scanning node
read line 1: EQ
has sons
read line 2: EQ
new op is ready


start scanning node
read line 1: "В"
read line 2: "В"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: ELSE
has sons
read line 2: ELSE
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: OUT
has sons
read line 2: OUT
new op is ready


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: 888
read line 2: 888
num read sym before val = 1
num read sym in val = 3


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: OUT
has sons
read line 2: OUT
new op is ready


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: 228
read line 2: 228
num read sym before val = 1
num read sym in val = 3


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: OUT
has sons
read line 2: OUT
new op is ready


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: DIV
has sons
read line 2: DIV
new op is ready


start scanning node
read line 1: SUB
has sons
read line 2: SUB
new op is ready


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: "В"
read line 2: "В"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: "Б"
read line 2: "Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: VAR
has sons
read line 2: VAR
new op is ready


start scanning node
read line 1: "Дискриминант"
read line 2: "Дискриминант"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: ASS
has sons
read line 2: ASS
new op is ready


start scanning node
read line 1: "Дискриминант"
read line 2: "Дискриминант"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: SUB
has sons
read line 2: SUB
new op is ready


start scanning node
read line 1: MUL
has sons
read line 2: MUL
new op is ready


start scanning node
read line 1: "Б"
read line 2: "Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: "Б"
read line 2: "Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: MUL
has sons
read line 2: MUL
new op is ready


start scanning node
read line 1: MUL
has sons
read line 2: MUL
new op is ready


start scanning node
read line 1: 4
read line 2: 4
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: "А"
read line 2: "А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: "В"
read line 2: "В"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: OUT
has sons
read line 2: OUT
new op is ready


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: DIV
has sons
read line 2: DIV
new op is ready


start scanning node
read line 1: ADD
has sons
read line 2: ADD
new op is ready


start scanning node
read line 1: SUB
has sons
read line 2: SUB
new op is ready


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: "Б"
read line 2: "Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: SQRT
has sons
read line 2: SQRT
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: "Дискриминант"
read line 2: "Дискриминант"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: MUL
has sons
read line 2: MUL
new op is ready


start scanning node
read line 1: 2
read line 2: 2
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: "А"
read line 2: "А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: STM
has sons
read line 2: STM
new op is ready


start scanning node
read line 1: OUT
has sons
read line 2: OUT
new op is ready


start scanning node
read line 1: PAR
has sons
read line 2: PAR
new op is ready


start scanning node
read line 1: DIV
has sons
read line 2: DIV
new op is ready


start scanning node
read line 1: SUB
has sons
read line 2: SUB
new op is ready


start scanning node
read line 1: SUB
has sons
read line 2: SUB
new op is ready


start scanning node
read line 1: 0
read line 2: 0
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: "Б"
read line 2: "Б"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: SQRT
has sons
read line 2: SQRT
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: "Дискриминант"
read line 2: "Дискриминант"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: MUL
has sons
read line 2: MUL
new op is ready


start scanning node
read line 1: 2
read line 2: 2
num read sym before val = 1
num read sym in val = 1


start scanning node
read line 1: "А"
read line 2: "А"
num read sym before val = 1
num read sym in val = 0


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready


start scanning node
read line 1: NIL
read line 2: NIL
new op is ready
Finish scanning tree file
tree pointer in HTMLDump: 000000c2a1bff6a0
picture name: graphCode1.png
tree pointer: 000000c2a1bff6a0
start making console cmd
console cmd: dot -T png -o graphCode1.png dump.dot


++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation FUNC



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

FUNC found


++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation PAR



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation VAR



++++++++++TableVar Dump++++++++++

Size     = 1
Capacity = 5

name: Коэф_А, memloc: 15 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 1
Capacity = 5

name: Коэф_А, memloc: 15 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 1
Capacity = 5

name: Коэф_А, memloc: 15 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation VAR



++++++++++TableVar Dump++++++++++

Size     = 2
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 2
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 2
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation VAR



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: Коэф_В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: Коэф_В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: Коэф_В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation INP



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: Коэф_В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: Коэф_В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation CALL



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: Коэф_В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation PAR



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: Коэф_А, memloc: 15 
name: Коэф_Б, memloc: 16 
name: Коэф_В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation FUNC



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

FUNC found


++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation PAR



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation IF



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation EQ



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation ELSE



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation IF



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation EQ



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation ELSE



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation IF



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation EQ



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation ELSE



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation OUT



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation OUT



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation OUT



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation DIV



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation SUB



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 3
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation VAR



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation ASS



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation SUB



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation MUL



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

try to MUL

++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation MUL



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation MUL



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

try to MUL

++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

try to MUL

++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation OUT



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation DIV



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation ADD

op ADD


++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation SUB



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation SQRT



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation MUL



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

try to MUL

++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation STM



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation OUT



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation DIV



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation SUB



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation SUB



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation SQRT



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation MUL



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

try to MUL

++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 4
Capacity = 5

name: А, memloc: 15 
name: Б, memloc: 16 
name: В, memloc: 17 
name: Дискриминант, memloc: 18 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL



++++++++++TableVar Dump++++++++++

Size     = 0
Capacity = 5

name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 
name: , memloc: 0 

----------TableVar Dump----------

Start Run Operation NIL


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
--------------------Finish program--------------------